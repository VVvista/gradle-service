buildscript {

    ext {
        springBootVersion = '2.0.0.RELEASE'
    }

    repositories {
        mavenCentral()
    }

    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

allprojects {
    group 'com.gsgradle.service'
    version '1.1-SNAPSHOT'
}

subprojects {
    apply plugin: 'java'
    apply plugin: "io.spring.dependency-management"


    sourceCompatibility = 1.8

    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
    }
// java编译的时候缺省状态下会因为中文字符而失败
    [compileJava, compileTestJava, javadoc]*.options*.encoding = 'UTF-8'

    repositories {
        mavenLocal()
        maven { url 'http://maven.aliyun.com/nexus/content/groups/public/' }
        mavenCentral()
    }

    dependencies {
        implementation 'ch.qos.logback:logback-classic:1.2.2'
        testImplementation group: 'junit', name: 'junit', version: '4.12'
        compile 'org.springframework.boot:spring-boot-gradle-plugin:2.0.0.RELEASE'
    }
}
apply from: 'other.gradle'
task task1 {
    doLast {
        println rootProject.ext.a
        println rootProject.ext.group
        println "group:${group}"
        println "version:${version}"

    }
}

//mainClassName = ':gs_gradle_core.HelloWorld'

// 配置任务过程参数调用
task taskConfig {
    println 'taskConfig configuration'
    doLast {
        println 'taskConfig execute doLast'
    }
    doFirst {
        println 'taskConfig execute doFirst'
    }
}

gradle.afterProject {
    println '配置阶段 afterProject'
}
project.beforeEvaluate {
    println '配置阶段 beforeEvaluate'
}
gradle.projectsEvaluated {
    println '配置阶段 projectsEvaluated'
}
project.afterEvaluate {
    println '配置阶段 afterEvaluate'
}
gradle.taskGraph.whenReady {
    println '配置任务 whenReady'
}
// 执行阶段
gradle.taskGraph.beforeTask {
    println "执行阶段 before task"
}
gradle.taskGraph.afterTask {
    println "执行阶段 afterTask "
}
gradle.buildFinished {
    println '构建结束 buildFinished'
}
